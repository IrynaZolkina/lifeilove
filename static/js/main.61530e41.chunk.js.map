{"version":3,"sources":["components/navbar/eeernbg.png","components/navbar/cart.png","components/navbar/Navbar.js","firebase/firebaseUtils.js","pages/home-page/Home.js","pages/about-page/About.js","pages/contact-page/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","handleScroll","setState","scrollPos","document","body","getBoundingClientRect","top","show","state","window","addEventListener","this","removeEventListener","className","exact","to","src","logo1","alt","cart","Component","withRouter","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","storage","Home","style","backgroundImage","About","props","handleChange","files","handleSave","console","log","file","uploadTask","ref","name","put","on","TaskEvent","STATE_CHANGED","snapshot","downloadURL","showImage","storageRef","child","getDownloadURL","then","url","getElementById","type","onChange","e","target","onClick","id","Contact","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61530e41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eeernbg.74379ac2.png\";","module.exports = __webpack_public_path__ + \"static/media/cart.ac2107c1.png\";","import React, { Component } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport logo1 from \"./eeernbg.png\";\r\nimport cart from \"./cart.png\";\r\nimport \"./navbar.scss\";\r\n\r\nclass Navbar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: true,\r\n      scrollPos: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n  handleScroll = () => {\r\n    // console.log(document.body.getBoundingClientRect());\r\n    this.setState({\r\n      scrollPos: document.body.getBoundingClientRect().top,\r\n      show: document.body.getBoundingClientRect().top > this.state.scrollPos,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className={this.state.show ? \"active\" : \"hidden\"}>\r\n          <div className=\"navbar-container\">\r\n            <NavLink exact to=\"/\">\r\n              {\" \"}\r\n              <img src={logo1} className=\"App-logo1\" alt=\"logo\" />{\" \"}\r\n            </NavLink>\r\n\r\n            <ul>\r\n              <li>\r\n                <NavLink exact to=\"/\">\r\n                  {\" \"}\r\n                  HOME{\" \"}\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> PRODUCTS </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> HOW TO USE </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> ABOUT </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> SHIPPING </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> BLOG </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink to=\"/contact\"> CONTACTS </NavLink>\r\n              </li>\r\n            </ul>\r\n            <img src={cart} className=\"cart-navbar\" alt=\"logo\" />\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n\r\n/* import React, { Component } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\nimport \"./navbar.scss\";\r\n\r\nclass Navbar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      scrolled: false,\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      const isTop = window.scrollY < 70;\r\n      if (isTop !== true) {\r\n        this.setState({ scrolled: true });\r\n      } else {\r\n        this.setState({ scrolled: false });\r\n      }\r\n    });\r\n  };\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener(\"scroll\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav\r\n          className={this.state.scrolled ? \"navigation scrolled\" : \"navigation\"}\r\n        >\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/\"> Home </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/about\"> About </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\"> Contact </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\"> Contact </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\"> Contact </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n */\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n//import \"firebase/auth\";\r\nimport \"firebase/storage\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBP0tDtDJhPUqG-NRZgMNZnyQagsmFclkc\",\r\n  authDomain: \"lifeilove-63924.firebaseapp.com\",\r\n  databaseURL: \"https://lifeilove-63924.firebaseio.com\",\r\n  projectId: \"lifeilove-63924\",\r\n  storageBucket: \"lifeilove-63924.appspot.com\",\r\n  messagingSenderId: \"286608892743\",\r\n  appId: \"1:286608892743:web:ec73d0545e74fd5ca3e262\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//export const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const storage = firebase.storage();\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nimport { storage } from \"../../firebase/firebaseUtils\";\r\nimport \"./home.scss\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"background-image-home\"\r\n        style={{\r\n          backgroundImage: `url( \"https://firebasestorage.googleapis.com/v0/b/lifeilove-63924.appspot.com/o/images%2FIMG_2325.jpg?alt=media&token=2aba4a08-3342-4953-8384-3997f49feb12\")`,\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"../../firebase/firebaseUtils\";\r\n\r\nclass About extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: null,\r\n    };\r\n  }\r\n  handleChange = (files) => {\r\n    this.setState({\r\n      files: files,\r\n    });\r\n  };\r\n  handleSave = () => {\r\n    console.log(\"************\");\r\n    let bucketName = \"images\";\r\n    let file = this.state.files[0];\r\n    let storageRef = firebase.storage().ref(`${bucketName}/${file.name}`);\r\n    let uploadTask = storageRef.put(file);\r\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, () => {\r\n      let downloadURL = uploadTask.snapshot.downloadURL;\r\n    });\r\n  };\r\n  showImage = () => {\r\n    let storageRef = firebase.storage().ref();\r\n    let spaceRef = storageRef.child(\"images/\" + this.state.files[0].name);\r\n    storageRef\r\n      .child(\"images/\" + this.state.files[0].name)\r\n      .getDownloadURL()\r\n      .then((url) => {\r\n        console.log(url);\r\n        document.getElementById(\"new-img\").src = url;\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        AAAAAAAAAAAAAA\r\n        <div>AAAAAAAAAAAAAA</div>\r\n        <div>AAAAAAAAAAAAAA</div>\r\n        <div>AAAAAAAAAAAAAA</div>\r\n        <div>AAAAAAAAAAAAAA</div>\r\n        <div>AAAAAAAAAAAAAA</div>\r\n        <input\r\n          type=\"file\"\r\n          onChange={(e) => {\r\n            this.handleChange(e.target.files);\r\n          }}\r\n        />\r\n        <button onClick={this.handleSave}>Save</button>\r\n        <button onClick={this.showImage}>Show Image</button>\r\n        <img id=\"new-img\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst Contact = () => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/home-page/Home\";\n\nimport \"./App.css\";\nimport About from \"./pages/about-page/About\";\nimport Contact from \"./pages/contact-page/Contact\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app-wrapper\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}